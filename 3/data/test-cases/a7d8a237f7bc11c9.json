{"uid":"a7d8a237f7bc11c9","name":"API create new user test","fullName":"tests.api.test_user#test_correct_user_creation","historyId":"04ca3dbe0052334036ee61d2e04788b5","time":{"start":1741180155355,"stop":1741180155592,"duration":237},"status":"failed","statusMessage":"AssertionError: Expected <{'id': 1}> to be equal to <{'email': 'test@test.com', 'id': 11, 'password': '3bc30c13a7e9438e9bc4f75ab18c07d4', 'username': 'username'}>, but was not.","statusTrace":"new_random_user = <data.api.model.user.User object at 0x7fef4c556d70>\n\n    @pytest.mark.positive\n    @pytest.mark.api\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"API create new user test\")\n    def test_correct_user_creation(new_random_user):\n>       UserApiTest().create_request(new_random_user, expected_id=11)\n\ntests/api/test_user.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.api.test_user.UserApiTest object at 0x7fef4c407e00>\nnew_object = <data.api.model.user.User object at 0x7fef4c556d70>\nexpected_id = 11\n\n    def create_request(self, new_object, expected_id):\n        actual_response = RequestsBuilder(self.ENDPOINT).execute_post_request(new_object.to_dict())\n        assert_that(actual_response.status_code).is_equal_to(HTTPStatus.OK)\n        new_object.set_id(expected_id)\n>       assert_that(actual_response.json()).is_equal_to(new_object.to_dict())\nE       AssertionError: Expected <{'id': 1}> to be equal to <{'email': 'test@test.com', 'id': 11, 'password': '3bc30c13a7e9438e9bc4f75ab18c07d4', 'username': 'username'}>, but was not.\n\ntests/api/base_api_test.py:29: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1741180152977,"stop":1741180153038,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1741180152977,"stop":1741180152977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1741180152977,"stop":1741180152977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1741180153039,"stop":1741180153039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1741180153039,"stop":1741180153039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"new_random_user","time":{"start":1741180155354,"stop":1741180155354,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected <{'id': 1}> to be equal to <{'email': 'test@test.com', 'id': 11, 'password': '3bc30c13a7e9438e9bc4f75ab18c07d4', 'username': 'username'}>, but was not.","statusTrace":"new_random_user = <data.api.model.user.User object at 0x7fef4c556d70>\n\n    @pytest.mark.positive\n    @pytest.mark.api\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"API create new user test\")\n    def test_correct_user_creation(new_random_user):\n>       UserApiTest().create_request(new_random_user, expected_id=11)\n\ntests/api/test_user.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.api.test_user.UserApiTest object at 0x7fef4c407e00>\nnew_object = <data.api.model.user.User object at 0x7fef4c556d70>\nexpected_id = 11\n\n    def create_request(self, new_object, expected_id):\n        actual_response = RequestsBuilder(self.ENDPOINT).execute_post_request(new_object.to_dict())\n        assert_that(actual_response.status_code).is_equal_to(HTTPStatus.OK)\n        new_object.set_id(expected_id)\n>       assert_that(actual_response.json()).is_equal_to(new_object.to_dict())\nE       AssertionError: Expected <{'id': 1}> to be equal to <{'email': 'test@test.com', 'id': 11, 'password': '3bc30c13a7e9438e9bc4f75ab18c07d4', 'username': 'username'}>, but was not.\n\ntests/api/base_api_test.py:29: AssertionError","steps":[{"name":"Send POST request","time":{"start":1741180155355,"stop":1741180155592,"duration":237},"status":"passed","steps":[],"attachments":[{"uid":"21d90e9564af213f","name":"Request URL","source":"21d90e9564af213f.txt","type":"text/plain","size":30},{"uid":"85fbf07fd58c0eb1","name":"Response Body","source":"85fbf07fd58c0eb1.json","type":"application/json","size":8},{"uid":"2d7ebc5a9d4e4a1a","name":"Response Status Code","source":"2d7ebc5a9d4e4a1a.txt","type":"text/plain","size":3}],"parameters":[{"name":"json","value":"{'id': None, 'username': 'username', 'email': 'test@test.com', 'password': '3bc30c13a7e9438e9bc4f75ab18c07d4'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"tag","value":"api"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_user"},{"name":"host","value":"fv-az1691-282"},{"name":"thread","value":"6069-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["api","positive"]},"source":"a7d8a237f7bc11c9.json","parameterValues":[]}